---
layout: post
title: 코딩테스트 8주차_양궁대회
date: 2025-10-05 23:38:00 +0300
description: "" # Add post description (optional)
img: book_pic1.jpg # Add image post (optional)
fig-caption: # Add figcaption (optional)
tags: [코딩테스트] # add tag
---

## 접근 전략
개념을 이해 → 수도코드 작성 → 코드 작성  
코드 작성하며 테스트를 돌려보고, 빠진 조건이 없는지 확인  

## 수도 코드

### (1) 모든 조합의 경우 구하기
```java
for (int i = 0; i <= 10; i++) {
    주어진 n으로 어피치 값을 커버 가능한지 확인;
    커버 가능하면 어피치 값 + 1을 라이언 값으로 세팅;
    n - 라이언값으로 재귀 함수 호출;
    계속 돌리기;
}
```
### (2) 각각 점수 계산
```java
for(int i =0; u <=10 i++) {
if 라이언,어피치 둘 다 0이 아니어야함
 라이언 점수가 어피치 점수보다 크면 점수 획득
}

if 최대차이가 0인지 아닌지 체크 0이면 -1 반환해야함
```
---

## 코테합 책 - 저자님 소스 인용
- *인용: 코딩 테스트 합격자 되기 - 박경록*  
- 링크: https://github.com/minkyungchu1014/java-codingtest-min-template/pull/2
---

## 어려웠던 점
1. 조건이 하나하나씩 달라질수록 나올 수 있는 답이 달라진다 😅  
   → 필수 조건을 놓치지 않기!  

---

## 새롭게 알게된 점
1. `ryan[i]`에 수를 넣으면 **백트래킹 이후 반드시 0으로 초기화**해야 한다.  
2. 조건 `n > apeach[i] + 1` 대신 책처럼 `Math.min()`을 쓰면 훨씬 깔끔하다.  
   - 내 방식: `n == 0` 도달이 보장되지 않음 → 이 부분 보완 필요  
   - 책의 방식: `n == 0` 도달이 보장됨  

---